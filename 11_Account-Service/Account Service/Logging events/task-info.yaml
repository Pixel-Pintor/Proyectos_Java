type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }
    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String putAccessApi = "/api/admin/user/access";
      private final String adminApi = "/api/admin/user/";
      private final String auditorApi = "/api/security/events/";

      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String petrPetrovWrongPassword = new TestReq(petrPetrov).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 5).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      private String[] auditorResponseApi = new String[]{
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "ivanivanov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role AUDITOR to ivanivanov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "maxmustermann@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@google.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "nautilus@pompilius.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role ACCOUNTANT to petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "REMOVE_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Remove role ACCOUNTANT from petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "DELETE_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "CHANGE_PASSWORD").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/changepass").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user/role").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/security/events").setProps("path", "/api/security/events").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "BRUTE_FORCE").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOCK_USER").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "Lock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson()
      };

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);


        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          for (int i = 0; i < responseJson.size(); i++) {

            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }

            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAccessApi(String api, HttpStatus status, String user, String reqUser,
                                   String operation, String answer, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response

        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("status", answer));
        } else {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }


        return CheckResult.correct();
      }

      CheckResult testLocking(String api, HttpStatus status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(), api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testAuditorApi(String api, int status, String user, String answer,
                                         int position, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
        if (responseJson.size() == 0) {
          throw new WrongAnswer("Empty array in response!");
        }

        if (responseJson.size() != correctJson.size()) {
          throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                  " events in response, must be - " + correctJson.size() + "\n" +
                  "response:\n" + getPrettyJson(responseJson)  + "\n" +
                  "must be:\n " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(responseJson.get(position).toString()).asJson().check(
                  isObject()
                          .value("action", correctJson.get(position).getAsJsonObject().get("action").getAsString())
                          .value("subject", correctJson.get(position).getAsJsonObject().get("subject").getAsString())
                          .value("object", isString( o -> o.contains(correctJson.get(position).getAsJsonObject().get("object").getAsString())))
                          .value("path", isString())
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }


      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      private String getSub (String[] src, int position) {
        return convert(Arrays.copyOfRange(src, 0, position));
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Create administrator and auditor
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 1
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 2
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      ivanIvanovCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"ROLE_AUDITOR", "ROLE_USER"}, ""), // 3

              // Testing user registration positive tests
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 0,"'CREATE_USER' security event missing"), // 4
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 1,"'CREATE_USER' security event missing"), // 5
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 2,"'GRANT_ROLE' security event missing"), // 6
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 7
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 4), 3,"'CREATE_USER' security event missing"), // 8
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 9
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 5), 4,"'CREATE_USER' security event missing"), // 10

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 11
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 12
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 13
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 6), 5,"'LOGIN_FAILED' security event missing"), // 14
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 15
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 7), 6,"'LOGIN_FAILED' security event missing"), // 16
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 17
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 18
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 8), 7,"'LOGIN_FAILED' security event missing"), // 19

    //          // Testing persistence
              () -> restartApplication(), // 20
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 21

              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDCorrectUser,
                      jDCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"), // 22
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, "Trying to add role ACCOUNTANT to user"), // 23
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 9), 8,"'GRANT_ROLE' security event missing"), // 24
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, "Trying to remove role ACCOUNTANT from user"), // 25
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 10), 9,"'REMOVE_ROLE' security event missing"), // 26

              //Delete user
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDCorrectUser,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 27
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 11), 10,"'DELETE_USER' security event missing"), // 28

              // Change password
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 12), 11,"'CHANGE_PASSWORD' security event missing"), // 30

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 31
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 13), 12,"'ACCESS_DENIED' security event missing"), // 32
              () -> testRoleModelNegative(adminApi, "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 33
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 14), 13,"'ACCESS_DENIED' security event missing"), // 34
              () -> testRoleModelNegative(adminApi, "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 35
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 15), 14,"'ACCESS_DENIED' security event missing"), // 36
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 37
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 16), 15,"'ACCESS_DENIED' security event missing"), // 38
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"), // 39
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 17), 16,"'ACCESS_DENIED' security event missing"), // 40
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 41
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 18), 17,"'ACCESS_DENIED' security event missing"), // 42

              () -> testRoleModelNegative(auditorApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 43
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 19), 18,"'ACCESS_DENIED' security event missing"), // 44

              // Testing locking user
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 45
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 20), 19,"'LOGIN_FAILED' security event missing"), // 46
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 47
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 21), 20,"'LOGIN_FAILED' security event missing"), // 48
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 49
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 22), 21,"'LOGIN_FAILED' security event missing"), // 50
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 51
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 23), 22,"'LOGIN_FAILED' security event missing"), // 52
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 53
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 23,"'LOGIN_FAILED' security event missing"), // 54
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password"), // 55
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 24,"'BRUTE_FORCE' security event missing"), // 56
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"UNLOCK",
                      "User maxmustermann@acme.com unlocked!", "User must be unlocked through admin endpoint"), // 57
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 25,"'LOCK_USER' security event missing"), // 58
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 26,"'UNLOCK_USER' security event missing"), // 59
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 60
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 28), 27,"'LOGIN_FAILED' security event missing"), // 61
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 62
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 29), 28,"'LOGIN_FAILED' security event missing"), // 63
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 64
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 30), 29,"'LOGIN_FAILED' security event missing"), // 65
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 66
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 31), 30,"'LOGIN_FAILED' security event missing"), // 67
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login!"), // 68
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 69
              () -> testUserRegistration(maxMusCorrectUser, 200,
                      "Counter of failed login attempts must be reset after successfully login!"), // 70
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"LOCK",
                      "User maxmustermann@acme.com locked!", ""), // 71
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 33), 31,"'LOCK_USER' security event missing"), // 72
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked through admin endpoint"), // 72
              () -> testPutAccessApi(putAccessApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDCorrectUser,"LOCK",
                      "Can't lock the ADMINISTRATOR!", ""),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"),

              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "User must be locked only after 5 attempts with wrong password"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "In case of a successful login, reset the counter of the failed attempt."),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, petrPetrovCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password!"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      secondResponseAdminApi, "Api must be available to admin user")
      };

    }
  learner_created: false
- name: src/account/dto/request/SignupRequest.java
  visible: true
  learner_created: true
- name: src/resources/static/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Security Test</title>
    </head>
    <body>
        <h1>Witaj nieznajomy!</h1>
    </body>
    </html>
  learner_created: true
- name: src/account/service/AuthService.java
  visible: true
  text: |-
    package account.service;

    import account.dto.request.SignupRequest;
    import account.model.Role;
    import account.model.User;
    import account.repository.RoleRepository;
    import account.repository.UserRepository;
    import lombok.AllArgsConstructor;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;

    import java.util.HashSet;
    import java.util.Set;

    @Service
    @AllArgsConstructor
    public class AuthService {
        private UserRepository userRepository;
        private RoleRepository roleRepository;
        private PasswordEncoder encoder;
        public User signup(SignupRequest request) {
            User user = new User(request.getName(), request.getLastname(),
                    request.getEmail().toLowerCase(), encoder.encode(request.getPassword()));
            user = updateRole(user);
            return userRepository.save(user);
        }

        public User updateRole(User user) {
            Set<Role> roles = new HashSet<>();
            if (userRepository.countAll() == 0) roles.add(roleRepository.findByName("ROLE_ADMINISTRATOR"));
            else roles.add(roleRepository.findByName("ROLE_USER"));
            user.setRoles(roles);
            return user;
        }

        public boolean checkExistsEmail(String email) {
            return userRepository.existsByEmailIgnoreCase(email);
        }

        public boolean isSameOldPass(String newPass, String oldPass) {
            return encoder.matches(newPass, oldPass);
        }

        public User changePass(String newPass, String email) {
            User user = userRepository.findByEmailIgnoreCase(email);
            user.setPassword(encoder.encode(newPass));
            return userRepository.save(user);
        }
    }
  learner_created: true
- name: src/account/service/PaymentService.java
  visible: true
  text: |-
    package account.service;

    import account.dto.request.UploadPayrollRequest;
    import account.model.Payment;
    import account.model.User;
    import account.repository.PaymentRepository;
    import account.repository.UserRepository;
    import lombok.AllArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import javax.transaction.Transactional;
    import java.time.YearMonth;
    import java.util.List;

    @Service
    @AllArgsConstructor
    public class PaymentService {
        private PaymentRepository paymentRepository;
        private UserRepository userRepository;

        @Transactional
        public void uploadPayroll(List<UploadPayrollRequest> payments) {
            for (UploadPayrollRequest payment :
                    payments) {
                User user = userRepository.findByEmailIgnoreCase(payment.getEmployee());
                if (user == null) throw new ResponseStatusException(HttpStatus.BAD_REQUEST);

                if (hasPaymentContainsPeriod(user, payment.getPeriod())) throw new ResponseStatusException(HttpStatus.BAD_REQUEST);

                Payment newPayment = new Payment();
                newPayment.setPeriod(payment.getPeriod());
                newPayment.setSalary(payment.getSalary());
                newPayment.setUser(user);

                paymentRepository.save(newPayment);
            }
        }

        public void updatePayment(UploadPayrollRequest payment) {
            User user = getUserPayment(payment.getEmployee());

            Payment p = paymentRepository.findByUserAndPeriod(user, payment.getPeriod());
            if (p == null) throw new ResponseStatusException(HttpStatus.BAD_REQUEST);

            p.setSalary(payment.getSalary());
            paymentRepository.save(p);
        }

        public Payment findPayment(User user, YearMonth period) {
            return paymentRepository.findByUserAndPeriod(user, period);
        }

        public List<Payment> findPayment(User user) {
            return paymentRepository.getByUserOrderByPeriodDesc(user);
        }

        public boolean hasPaymentContainsPeriod(User user, YearMonth period) {
            return paymentRepository.existsByUserAndPeriod(user, period);
        }

        private User getUserPayment(String email) {
            User user = userRepository.findByEmailIgnoreCase(email);
            if (user == null) throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            return user;
        }
    }
  learner_created: true
- name: src/account/annotation/EnumCheck.java
  visible: true
  text: |-
    package account.annotation;


    import account.validator.EnumValidator;

    import javax.validation.Constraint;
    import javax.validation.Payload;
    import javax.validation.ReportAsSingleViolation;
    import javax.validation.constraints.NotNull;
    import java.lang.annotation.*;

    @Documented
    @Constraint(validatedBy = EnumValidator.class)
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    @NotNull(message = "Value cannot be null")
    @ReportAsSingleViolation
    public @interface EnumCheck {
        Class<? extends Enum<?>> enumClazz();

        String message() default "Value is not valid";

        Class<?>[] groups() default {};

        Class<? extends Payload>[] payload() default {};
    }
  learner_created: true
- name: src/account/service/UserDetailsServiceImpl.java
  visible: true
  text: |-
    package account.service;

    import account.model.User;
    import account.model.UserDetailsImpl;
    import account.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {
        private final UserRepository userRepository;

        @Autowired
        public UserDetailsServiceImpl(UserRepository userRepository) {
            this.userRepository = userRepository;
        }

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = userRepository.findByEmailIgnoreCase(username);

            if (user == null) throw new UsernameNotFoundException("Not found: " + username);
            return new UserDetailsImpl(user);
        }
    }
  learner_created: true
- name: src/account/controller/AuthController.java
  visible: true
  text: |
    package account.controller;

    import account.component.CurrentUser;
    import account.dto.request.ChangePassRequest;
    import account.dto.request.SignupRequest;
    import account.dto.response.ChangePassResponse;
    import account.dto.response.UserDto;
    import account.mapper.ChangePassResponseMapper;
    import account.mapper.UserDtoMapper;
    import account.model.User;
    import account.service.AuthService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;

    @RestController
    @RequestMapping("/api/auth")
    public class AuthController {
        private final AuthService authService;
        private final CurrentUser currentUser;

        @Autowired
        public AuthController(AuthService authService, CurrentUser currentUser) {
            this.authService = authService;
            this.currentUser = currentUser;
        }

        @PostMapping("/signup")
        public ResponseEntity<UserDto> signup(@Valid @RequestBody SignupRequest request) {
            if (authService.checkExistsEmail(request.getEmail())) throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User exist!");
            return ResponseEntity.ok().body(UserDtoMapper.mapping(authService.signup(request)));
        }

        @PostMapping("/changepass")
        public ResponseEntity<ChangePassResponse> changePass(@Valid @RequestBody ChangePassRequest request) {
            if (currentUser.getCurrentUser().isEmpty()) throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            User user = currentUser.getCurrentUser().get().getUser();

            if (authService.isSameOldPass(request.getNew_password(), user.getPassword())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The passwords must be different!");
            }

            return ResponseEntity.ok().body(ChangePassResponseMapper.mapping(authService.changePass(request.getNew_password(), user.getEmail())));
        }
    }
  learner_created: true
- name: src/account/bean/BreachedPasswords.java
  visible: true
  text: |-
    package account.bean;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    import java.util.List;

    @Configuration
    public class BreachedPasswords {
        @Bean
        public List<String> ListBreachedPasswords() {
            return List.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                    "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                    "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");
        }
    }
  learner_created: true
- name: src/account/annotation/BreachedPasswordCheck.java
  visible: true
  text: |-
    package account.annotation;

    import account.validator.BreachedPasswordValidator;

    import javax.validation.Constraint;
    import javax.validation.Payload;
    import javax.validation.ReportAsSingleViolation;
    import javax.validation.constraints.NotNull;
    import java.lang.annotation.*;

    @Documented
    @Constraint(validatedBy = BreachedPasswordValidator.class)
    @Target( { ElementType.FIELD })
    @Retention(RetentionPolicy.RUNTIME)
    @NotNull
    @ReportAsSingleViolation
    public @interface BreachedPasswordCheck {
        String message() default "The password is in the hacker's database!";
        Class<?>[] groups() default {};
        Class<? extends Payload>[] payload() default {};
    }
  learner_created: true
- name: src/account/repository/PaymentRepository.java
  visible: true
  text: |-
    package account.repository;

    import account.model.Payment;
    import account.model.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.time.LocalDate;
    import java.time.YearMonth;
    import java.util.List;

    @Repository
    public interface PaymentRepository extends CrudRepository<Payment, Long> {
        boolean existsByUserAndPeriod(User user, YearMonth period);
        Payment findByUserAndPeriod(User user, YearMonth period);
        List<Payment> getByUserOrderByPeriodDesc(User user);
    }
  learner_created: true
- name: src/account/configuration/WebSecurityConfigurerImpl.java
  visible: true
  text: |-
    package account.configuration;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    import javax.servlet.http.HttpServletResponse;

    @EnableWebSecurity
    public class WebSecurityConfigurerImpl extends WebSecurityConfigurerAdapter {
        @Autowired
        UserDetailsService userDetailsService;
        @Autowired
        RestAuthenticationEntryPoint restAuthenticationEntryPoint;
        @Autowired
        CustomAccessDeniedHandler customAccessDeniedHandler;

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.userDetailsService(userDetailsService)
                    .passwordEncoder(getEncoder());
        }

        public void configure(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .antMatchers(HttpMethod.POST, "/api/signup").permitAll()
                    .mvcMatchers("api/auth/changepass").authenticated()
                    .mvcMatchers("api/empl/payment").hasAnyRole("USER", "ACCOUNTANT")
                    .mvcMatchers("api/acct/payments").hasRole("ACCOUNTANT")
                    .mvcMatchers("api/admin/**").hasRole("ADMINISTRATOR")
                    // other matchers

                    .and()
                    .exceptionHandling().accessDeniedHandler(customAccessDeniedHandler)

                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }
    }
  learner_created: true
- name: src/account/component/StringToLocalDateConverter.java
  visible: true
  text: |-
    package account.component;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.server.ResponseStatusException;

    import java.time.YearMonth;

    public class StringToLocalDateConverter {
        public static YearMonth convert(String source) {
            if (!source.matches("^(1[0-2]|0[1-9])-\\d{4}$")) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid format MM-yyyy");
            }
            String[] parts = source.split("-");
            return YearMonth.of(Integer.parseInt(parts[1]), Integer.parseInt(parts[0]));
        }
    }
  learner_created: true
- name: src/account/component/CurrentUser.java
  visible: true
  text: |-
    package account.component;

    import account.model.UserDetailsImpl;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.stereotype.Component;

    import java.util.Optional;

    @Component
    public class CurrentUser {
        public Optional<UserDetailsImpl> getCurrentUser() {
            Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
            if (principal instanceof UserDetails) {
                return Optional.of((UserDetailsImpl)principal);
            }
            return Optional.empty();
        }
    }
  learner_created: true
- name: src/account/component/SetupDataLoader.java
  visible: true
  text: |-
    package account.component;

    import account.model.Role;
    import account.repository.RoleRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.context.event.ContextRefreshedEvent;
    import org.springframework.stereotype.Component;

    import javax.transaction.Transactional;

    @Component
    public class SetupDataLoader implements ApplicationListener<ContextRefreshedEvent> {
        boolean alreadySetup = false;
        @Autowired
        RoleRepository roleRepository;

        @Override
        @Transactional
        public void onApplicationEvent(ContextRefreshedEvent event) {
            System.out.println("Setup role");
            if (alreadySetup) return;
            createRoleIfNotFound("ROLE_USER");
            createRoleIfNotFound("ROLE_ACCOUNTANT");
            createRoleIfNotFound("ROLE_ADMINISTRATOR");
            roleRepository.findAll().forEach(role -> System.out.println(role.getName()));
            alreadySetup = true;
        }

        @Transactional
        Role createRoleIfNotFound(String name) {
            Role role = roleRepository.findByName(name);
            if (role == null) {
                role = new Role();
                role.setName(name);
                roleRepository.save(role);
            }
            return role;
        }
    }
  learner_created: true
- name: src/account/mapper/ChangePassResponseMapper.java
  visible: true
  text: |-
    package account.mapper;

    import account.dto.response.ChangePassResponse;
    import account.model.User;

    public class ChangePassResponseMapper {
        public static ChangePassResponse mapping(User user) {
            return new ChangePassResponse(user.getEmail(), "The password has been updated successfully");
        }
    }
  learner_created: true
- name: src/account/dto/request/UploadPayrollRequest.java
  visible: true
  text: |
    package account.dto.request;

    import com.fasterxml.jackson.annotation.JsonFormat;
    import lombok.*;

    import javax.validation.constraints.Min;
    import javax.validation.constraints.NotNull;
    import java.time.YearMonth;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    public class UploadPayrollRequest {
        @NotNull
        private String employee;
        @NotNull
        @JsonFormat(pattern = "MM-yyyy")
        private YearMonth period;
        @NotNull
        @Min(0)
        private long salary;
    }
  learner_created: true
- name: src/account/dto/response/ChangePassResponse.java
  visible: true
  text: |
    package account.dto.response;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    public class ChangePassResponse {
        private String email;
        private String status;
    }
  learner_created: true
- name: src/account/dto/response/UserDto.java
  visible: true
  text: |-
    package account.dto.response;

    import account.model.Role;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import java.util.Set;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    public class UserDto {
        private long id;
        private String name;
        private String lastname;
        private String email;
        private Set<String> roles;
    }
  learner_created: true
- name: src/account/dto/request/ChangePassRequest.java
  visible: true
  text: |-
    package account.dto.request;

    import account.annotation.BreachedPasswordCheck;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.Pattern;

    @Getter
    @NoArgsConstructor
    @AllArgsConstructor
    public class ChangePassRequest {
        @Pattern(regexp = "[\\da-zA-Z]{12,}", message = "Password length must be 12 chars minimum!")
        @BreachedPasswordCheck
        private String new_password;
    }
  learner_created: true
- name: src/account/controller/ControllerExceptionHandler.java
  visible: true
  text: |-
    package account.controller;


    import account.dto.response.ErrorMessage;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.context.request.WebRequest;

    import javax.validation.ConstraintViolation;
    import javax.validation.ConstraintViolationException;
    import java.time.LocalDateTime;
    import java.util.Set;

    @ControllerAdvice
    public class ControllerExceptionHandler {
        @ResponseStatus(value = HttpStatus.BAD_REQUEST)
        @ExceptionHandler(value = { ConstraintViolationException.class })
        public ResponseEntity<ErrorMessage> handleResourceNotFoundException(ConstraintViolationException e, WebRequest request) {
            Set<ConstraintViolation<?>> violations = e.getConstraintViolations();
            StringBuilder strBuilder = new StringBuilder();
            for (ConstraintViolation<?> violation : violations ) {
                strBuilder.append(violation.getMessage()).append("\n");
            }
            return ResponseEntity.badRequest().body(new ErrorMessage(
                    LocalDateTime.now(),
                    strBuilder.toString(),
                    HttpStatus.BAD_REQUEST.getReasonPhrase(),
                    HttpStatus.BAD_REQUEST.value(),
                    request.getDescription(false).replace("uri=", "")
            ));
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(value = { MethodArgumentNotValidException.class })
        public ResponseEntity<ErrorMessage> handleMethodArgumentNotValidException(
                MethodArgumentNotValidException ex, WebRequest request
        ) {
            return ResponseEntity.badRequest().body(new ErrorMessage(
                    LocalDateTime.now(),
                    ex.getBindingResult().getFieldErrors().get(0).getDefaultMessage(),
                    HttpStatus.BAD_REQUEST.getReasonPhrase(),
                    HttpStatus.BAD_REQUEST.value(),
                    request.getDescription(false).replace("uri=", "")
            ));
        }
    }
  learner_created: true
- name: src/account/model/UserDetailsImpl.java
  visible: true
  text: |-
    package account.model;


    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.Set;

    public class UserDetailsImpl implements UserDetails {
        private final String name;
        private final String lastname;
        private final String email;
        private final String password;
        private final User user;
        private final Collection<GrantedAuthority> roles;

        public UserDetailsImpl(User user) {
            this.name = user.getName();
            this.lastname = user.getLastname();
            this.email = user.getEmail();
            this.password = user.getPassword();
            this.roles = getAuthorities(user);
            this.user = user;
        }

        private Collection<GrantedAuthority> getAuthorities(User user){
            Set<Role> userGroups = user.getRoles();
            Collection<GrantedAuthority> authorities = new ArrayList<>(userGroups.size());
            for(Role userGroup : userGroups){
                authorities.add(new SimpleGrantedAuthority(userGroup.getName()));
            }

            return authorities;
        }

        public User getUser() {
            return user;
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return roles;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return email;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/mapper/UserDtoMapper.java
  visible: true
  text: |-
    package account.mapper;

    import account.dto.response.UserDto;
    import account.model.User;

    import java.util.HashSet;
    import java.util.Set;

    public class UserDtoMapper {
        public static UserDto mapping(User user) {
            Set<String> roles = new HashSet<>();
            user.getRoles().forEach(role -> roles.add(role.getName()));
            return new UserDto(user.getId(), user.getName(), user.getLastname(), user.getEmail(), roles);
        }
    }
  learner_created: true
- name: src/account/model/Role.java
  visible: true
  text: |-
    package account.model;

    import lombok.Generated;
    import lombok.Getter;
    import lombok.Setter;

    import javax.persistence.*;
    import java.util.Set;

    @Entity
    @Getter
    @Setter
    @Table(name = "role")
    public class Role {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;
        private String name;
        @ManyToMany(mappedBy = "roles")
        private Set<User> users;
    }
  learner_created: true
- name: src/account/repository/RoleRepository.java
  visible: true
  text: |-
    package account.repository;


    import account.model.Role;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface RoleRepository extends CrudRepository<Role, Integer> {
        Role findByName(String name);
    }
  learner_created: true
- name: src/account/dto/request/UpdateRoleRequest.java
  visible: true
  text: |-
    package account.dto.request;

    import account.annotation.EnumCheck;
    import account.model.RoleOperationStatus;
    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.NotNull;

    @Getter
    @NoArgsConstructor
    @AllArgsConstructor
    public class UpdateRoleRequest {
        @NotNull
        private String user;
        @NotNull
        private String role;
        @EnumCheck(enumClazz = RoleOperationStatus.class)
        private String operation;
    }
  learner_created: true
- name: src/account/repository/UserRepository.java
  visible: true
  text: |-
    package account.repository;

    import account.model.User;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        User findByEmailIgnoreCase(String email);
        boolean existsByEmailIgnoreCase(String email);
        @Query(value = "Select count(*) from user", nativeQuery = true)
        int countAll();
    }
  learner_created: true
- name: src/account/configuration/RestAuthenticationEntryPoint.java
  visible: true
  text: |-
    package account.configuration;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/model/RoleOperationStatus.java
  visible: true
  text: |-
    package account.model;

    public enum RoleOperationStatus {
        GRANT,
        REMOVE
    }
  learner_created: true
- name: src/account/dto/response/ErrorMessage.java
  visible: true
  text: |-
    package account.dto.response;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    import java.time.LocalDateTime;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    public class ErrorMessage {
        private LocalDateTime timestamp;
        private String message;
        private String error;
        private int status;
        private String path;
    }
  learner_created: true
- name: src/account/controller/PaymentController.java
  visible: true
  text: |-
    package account.controller;

    import account.dto.request.UploadPayrollRequest;
    import account.service.PaymentService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;
    import java.util.Map;

    @RestController
    @Validated
    @RequestMapping("/api")
    public class PaymentController {
        private final PaymentService paymentService;

        @Autowired
        public PaymentController(PaymentService paymentService) {
            this.paymentService = paymentService;
        }

        @PostMapping("/acct/payments")
        public ResponseEntity<Map<String, String>> createPayments(@RequestBody List<@Valid UploadPayrollRequest> request) {
            paymentService.uploadPayroll(request);
            return ResponseEntity.ok().body(Map.of("status", "Added successfully!"));
        }

        @PutMapping("/acct/payments")
        public ResponseEntity<Map<String, String>> updatePayment(@RequestBody @Valid UploadPayrollRequest request) {
            paymentService.updatePayment(request);
            return ResponseEntity.ok().body(Map.of("status", "Updated successfully!"));
        }


    }
  learner_created: true
- name: src/account/validator/EnumValidator.java
  visible: true
  text: |-
    package account.validator;

    import account.annotation.EnumCheck;

    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;
    import java.util.ArrayList;
    import java.util.List;

    public class EnumValidator implements ConstraintValidator<EnumCheck, String> {
        List<String> valueList = null;

        @Override
        public void initialize(EnumCheck constraintAnnotation) {
            valueList = new ArrayList<>();
            Class<? extends Enum<?>> enumClass = constraintAnnotation.enumClazz();

            @SuppressWarnings("rawtypes")
            Enum[] enumValArr = enumClass.getEnumConstants();
            for (@SuppressWarnings("rawtypes") Enum enumVal : enumValArr) {
                valueList.add(enumVal.toString());
            }
        }

        @Override
        public boolean isValid(String value, ConstraintValidatorContext context) {
            return valueList.contains(value);
        }
    }
  learner_created: true
- name: src/account/validator/BreachedPasswordValidator.java
  visible: true
  text: |-
    package account.validator;

    import account.annotation.BreachedPasswordCheck;
    import org.springframework.beans.factory.annotation.Autowired;

    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;
    import java.util.List;

    public class BreachedPasswordValidator implements ConstraintValidator<BreachedPasswordCheck, String> {
        private final List<String> listBreachedPasswords;
        public BreachedPasswordValidator(@Autowired List<String> listBreachedPasswords) {
            this.listBreachedPasswords = listBreachedPasswords;
        }

        @Override
        public void initialize(BreachedPasswordCheck constraintAnnotation) {
        }

        @Override
        public boolean isValid(String value, ConstraintValidatorContext context) {
            return !listBreachedPasswords.contains(value);
        }
    }
  learner_created: true
- name: src/account/controller/AdminController.java
  visible: true
  text: |-
    package account.controller;

    import account.dto.request.UpdateRoleRequest;
    import account.dto.response.UserDto;
    import account.mapper.UserDtoMapper;
    import account.model.RoleOperationStatus;
    import account.service.UserService;
    import lombok.AllArgsConstructor;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    @RestController
    @RequestMapping("/api/admin")
    @AllArgsConstructor
    public class AdminController {
        private UserService userService;

        @GetMapping("/user")
        public ResponseEntity<List<UserDto>> getUserList() {
            return ResponseEntity.ok().body(userService.getAll().stream().map(UserDtoMapper::mapping).collect(Collectors.toList()));
        }

        @DeleteMapping(value = {"/user/{email}", "/user/", "/user"})
        public ResponseEntity<Map<String, String>> deleteUser(@PathVariable String email) {
            userService.deleteUser(email);
            return ResponseEntity.ok().body(Map.of("user", email, "status", "Deleted successfully!"));
        }

        @PutMapping("/user/role")
        public ResponseEntity<UserDto> updateUserRole(@RequestBody @Valid UpdateRoleRequest request) {
            return ResponseEntity.ok().body(UserDtoMapper.mapping(userService.updateRole(RoleOperationStatus.valueOf(request.getOperation()), request.getRole(), request.getUser())));
        }
    }
  learner_created: true
- name: src/account/mapper/PaymentDtoMapper.java
  visible: true
  text: |-
    package account.mapper;

    import account.dto.response.PaymentDto;
    import account.model.Payment;
    import account.model.User;

    import java.text.DateFormatSymbols;

    public class PaymentDtoMapper {
        public static PaymentDto mapping(Payment payment) {
            User user = payment.getUser();

            String strSalary;
            strSalary = String.format("%s dollar(s) %s cent(s)", payment.getSalary() / 100, payment.getSalary() % 100);

            String strMonth = new DateFormatSymbols().getMonths()[payment.getPeriod().getMonth().getValue() - 1];
            String strPeriod = String.format("%s-%s", strMonth, payment.getPeriod().getYear());

            return new PaymentDto(user.getName(), user.getLastname(), strPeriod, strSalary);
        }
    }
  learner_created: true
- name: src/account/service/UserService.java
  visible: true
  text: |-
    package account.service;

    import account.model.Role;
    import account.model.RoleOperationStatus;
    import account.model.User;
    import account.repository.RoleRepository;
    import account.repository.UserRepository;
    import lombok.AllArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;

    @Service
    @AllArgsConstructor
    public class UserService {
        private UserRepository userRepository;
        private RoleRepository roleRepository;

        public List<User> getAll() {
            return (List<User>) userRepository.findAll();
        }

        public void deleteUser(String email) {
            User user = getUser(email);
            if (isAdministrator(user)) throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            userRepository.delete(user);
        }

        public User updateRole(RoleOperationStatus operation, String strRole, String email) {
            User user = getUser(email);
            Role role = roleRepository.findByName("ROLE_" + strRole);
            if (role == null) throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Role not found!");
            if (operation.equals(RoleOperationStatus.GRANT)) grantRole(role, user);
            if (operation.equals(RoleOperationStatus.REMOVE)) removeRole(role, user);
            return user;
        }

        private void grantRole(Role role, User user) {
            if (isAdministrator(user) || role.getName().equals("ROLE_ADMINISTRATOR")) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
            }
            Set<Role> roles = new HashSet<>(user.getRoles());
            roles.add(role);
            user.setRoles(roles);
            userRepository.save(user);
        }

        private void removeRole(Role role, User user) {
            if (!user.getRoles().contains(role)) throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user does not have a role!");
            if (role.getName().equals("ROLE_ADMINISTRATOR")) throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            if (user.getRoles().size() == 1) throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user must have at least one role!");
            Set<Role> roles = new HashSet<>(user.getRoles());
            roles.remove(role);
            user.setRoles(roles);
            userRepository.save(user);
        }

        private User getUser(String email) {
            User user = userRepository.findByEmailIgnoreCase(email);
            if (user == null) throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");
            return user;
        }

        private boolean isAdministrator(User user) {
            for (Role role :
                    user.getRoles()) {
                if (role.getName().equals("ROLE_ADMINISTRATOR")) return true;
            }
            return false;
        }
    }
  learner_created: true
- name: src/account/controller/EmployeeController.java
  visible: true
  text: |
    package account.controller;

    import account.component.CurrentUser;
    import account.component.StringToLocalDateConverter;
    import account.mapper.PaymentDtoMapper;
    import account.model.Payment;
    import account.model.User;
    import account.service.PaymentService;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import java.time.YearMonth;
    import java.util.List;
    import java.util.stream.Collectors;

    @RestController
    @Validated
    @RequestMapping("/api/empl")
    public class EmployeeController {
        private final PaymentService paymentService;
        private final CurrentUser currentUser;

        public EmployeeController(PaymentService paymentService, CurrentUser currentUser) {
            this.paymentService = paymentService;
            this.currentUser = currentUser;
        }

        @GetMapping("/payment")
        public ResponseEntity<?> findByPeriod(
                @RequestParam(name = "period", required = false) String strPeriod
        ) {
            if (currentUser.getCurrentUser().isEmpty()) throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            User user = currentUser.getCurrentUser().get().getUser();

            if (strPeriod != null) {
                YearMonth period = StringToLocalDateConverter.convert(strPeriod);
                Payment payment = paymentService.findPayment(user, period);
                return ResponseEntity.ok().body(PaymentDtoMapper.mapping(payment));
            } else {
                List<Payment> payments = paymentService.findPayment(user);
                return ResponseEntity.ok().body(
                        payments.stream().map(PaymentDtoMapper::mapping).collect(Collectors.toList())
                );
            }

        }
    }
  learner_created: true
- name: src/account/configuration/CustomAccessDeniedHandler.java
  visible: true
  text: |-
    package account.configuration;

    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.web.access.AccessDeniedHandler;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class CustomAccessDeniedHandler implements AccessDeniedHandler {
        @Override
        public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied!");
        }
    }
  learner_created: true
- name: src/account/model/UserOperationStatus.java
  visible: true
  learner_created: true
- name: src/account/dto/request/UpdateActivatedUserRequest.java
  visible: true
  learner_created: true
- name: src/account/bean/RoleList.java
  visible: true
  learner_created: true
- name: src/account/model/LogEvent.java
  visible: true
  learner_created: true
- name: src/account/model/EventEnum.java
  visible: true
  learner_created: true
- name: src/account/repository/LogEventRepository.java
  visible: true
  learner_created: true
- name: src/account/service/LogService.java
  visible: true
  learner_created: true
- name: src/account/component/DecodeBase64.java
  visible: true
  learner_created: true
- name: src/account/component/AttemptCounter.java
  visible: true
  learner_created: true
- name: src/account/controller/AuditorController.java
  visible: true
  learner_created: true
- name: src/account/component/AuthenticationSuccessEventListener.java
  visible: true
  learner_created: true
- name: src/account/dto/response/PaymentDto.java
  visible: true
  text: |-
    package account.dto.response;

    import lombok.AllArgsConstructor;
    import lombok.Getter;
    import lombok.NoArgsConstructor;
    import lombok.Setter;

    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    public class PaymentDto {
        private String name;
        private String lastname;
        private String period;
        private String salary;
    }
  learner_created: true
- name: src/account/constants/Regexp.java
  visible: true
  learner_created: true
- name: src/account/entities/BreachedPassword.java
  visible: true
  learner_created: true
- name: src/account/model/User.java
  visible: true
  text: |-
    package account.model;

    import lombok.*;

    import javax.persistence.*;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;

    @Entity
    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor
    @Table(name = "user")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;
        private String name;
        private String lastname;
        private String email;
        private String password;

        @OneToMany(mappedBy = "user")
        private List<Payment> payments;

        @ManyToMany(fetch = FetchType.EAGER)
        @JoinTable(
                name = "users_roles",
                joinColumns = @JoinColumn(name = "user_id"),
                inverseJoinColumns = @JoinColumn(name = "role_id")
        )
        private Set<Role> roles = new HashSet<>();

        public User(String name, String lastname, String email, String password) {
            this.name = name;
            this.lastname = lastname;
            this.email = email;
            this.password = password;
        }
    }
  learner_created: true
- name: src/account/model/Payment.java
  visible: true
  text: |-
    package account.model;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import java.time.YearMonth;

    @Entity
    @NoArgsConstructor
    @AllArgsConstructor
    @Data
    @Table(name = "payment")
    public class Payment {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;
        private YearMonth period;
        private long salary;

        @ManyToOne(fetch = FetchType.LAZY, optional = false)
        @JoinColumn(name = "user_id", nullable = false)
        private User user;

        public Payment(YearMonth period, long salary) {
            this.period = period;
            this.salary = salary;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16606#comment
status: Failed
feedback:
  message: Failed to launch checking
  time: Tue, 26 Jul 2022 23:23:24 UTC
record: -1
