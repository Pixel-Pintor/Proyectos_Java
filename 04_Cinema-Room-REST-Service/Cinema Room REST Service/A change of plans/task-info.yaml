type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/service/SeatService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.SeatModel;
    import cinema.model.SeatModelPrice;
    import cinema.model.exception.OutOfBoundsException;
    import cinema.model.exception.SeatBookedException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    @Component
    public class SeatService {

        RoomService roomService;

        @Autowired
        public SeatService(RoomService roomService) {
            this.roomService = roomService;
        }

        public SeatModelPrice managePurchaseSeatRequest(SeatModel seatModel) {
            SeatModelPrice seatModelPrice = new SeatModelPrice(seatModel);
            if (!roomService.isRowOrColumnOutOfBounds(seatModelPrice)) {
                throw new OutOfBoundsException();
            } else if (!roomService.isSeatAvailable(seatModelPrice)) {
                throw new SeatBookedException();
            } else {
                roomService.updateRoomSeats(seatModelPrice);
                roomService.updateAvailableSeats(seatModelPrice);
            }
            return seatModelPrice;
        }
    }
  learner_created: true
- name: src/cinema/model/exception/SeatBookedException.java
  visible: true
  text: |
    package cinema.model.exception;

    public class SeatBookedException extends RuntimeException {

        public SeatBookedException() {
            super("The ticket has been already purchased!");
        }
    }
  learner_created: true
- name: src/cinema/model/SeatModel.java
  visible: true
  text: |
    package cinema.model;

    import java.util.Objects;

    public class SeatModel {
        private int row;
        private int column;

        public SeatModel(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public SeatModel() {}

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }


        @Override
        public String toString() {
            return "{" + this.getRow() + ", " + this.getColumn() + "}";
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            SeatModel seatModel = (SeatModel) o;
            return row == seatModel.row && column == seatModel.column;
        }

        @Override
        public int hashCode() {
            return Objects.hash(row, column);
        }
    }
  learner_created: true
- name: src/cinema/model/exception/OutOfBoundsException.java
  visible: true
  text: |
    package cinema.model.exception;


    public class OutOfBoundsException extends RuntimeException {

        public OutOfBoundsException() {
            super("The number of a row or a column is out of bounds!");
        }
    }
  learner_created: true
- name: src/cinema/controller/RoomController.java
  visible: true
  text: |-
    package cinema.controller;

    import cinema.model.RoomModel;
    import cinema.service.RoomService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class RoomController {

        RoomService roomService;

        @Autowired
        public RoomController(RoomService roomService) {
            this.roomService = roomService;
        }

        @GetMapping("/seats")
        public RoomModel getRoomModel() {
            return roomService.getRoomModel();
        }
    }
  learner_created: true
- name: src/cinema/model/exception/CustomExceptionMessage.java
  visible: true
  text: |
    package cinema.model.exception;

    public class CustomExceptionMessage {

        String error;

        public CustomExceptionMessage(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }
    }
  learner_created: true
- name: src/cinema/service/RoomService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.RoomModel;
    import cinema.model.SeatModel;
    import cinema.model.SeatModelPrice;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;
    import org.springframework.stereotype.Service;

    @Component
    public class RoomService {

        RoomModel roomModel;

        @Autowired
        public RoomService(RoomModel roomModel) {
            this.roomModel = roomModel;
        }

        public RoomModel getRoomModel() {
            return roomModel;
        }

        public void updateAvailableSeats(SeatModelPrice seatModelPrice) {
            this.roomModel.getAvailableSeats().remove(seatModelPrice);
        }

        public void updateRoomSeats(SeatModelPrice seatModelPrice) {
            this.roomModel.getRoomSeats().put(seatModelPrice, false);
        }

        public boolean isRowOrColumnOutOfBounds(SeatModelPrice seatModelPrice) {
            return this.roomModel.getRoomSeats().containsKey(seatModelPrice);
        }

        public boolean isSeatAvailable(SeatModelPrice seatModelPrice) {
            return this.roomModel.getRoomSeats().get(seatModelPrice);
        }
    }
  learner_created: true
- name: src/cinema/controller/SeatController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.model.SeatModel;
    import cinema.service.SeatService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class SeatController {

        SeatService seatService;

        @Autowired
        public SeatController(SeatService seatService) {
            this.seatService = seatService;
        }

        @PostMapping("/purchase")
        public SeatModel purchaseSeat(@RequestBody SeatModel seatModel) {
            return seatService.managePurchaseSeatRequest(seatModel);
        }
    }
  learner_created: true
- name: src/cinema/model/RoomModel.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    @Component
    public class RoomModel {
        private final int totalRows;
        private final int totalColumns;
        private final List<SeatModelPrice> availableSeats = new ArrayList<>(); // sillas con precio
        @JsonIgnore
        private final Map<SeatModelPrice, Boolean> roomSeats = new HashMap<>(); // sillas con precio y disponibilidad

        @Autowired
        public RoomModel() {
            this.totalRows = 9;
            this.totalColumns = 9;
            this.createAvailableSeats();
        }

        public void createCinemaRoomSeats() {
            for (int i = 1; i <= this.totalRows; i++) {
                for (int j = 1; j <= this.totalColumns; j++) {
                    this.getAvailableSeats().add(new SeatModelPrice(i, j));
                }
            }
        }

        public void createAvailableSeats() {
            this.createCinemaRoomSeats();
            for (SeatModelPrice seat : this.getAvailableSeats()) {
                this.getRoomSeats().put(seat, true);
            }
        }

        @SuppressWarnings("unused")
        @JsonProperty("total_rows")
        public int getTotalRows() {
            return totalRows;
        }

        @SuppressWarnings("unused")
        @JsonProperty("total_columns")
        public int getTotalColumns() {
            return totalColumns;
        }

        @JsonProperty("available_seats")
        public List<SeatModelPrice> getAvailableSeats() {
            return availableSeats;
        }

        public Map<SeatModelPrice, Boolean> getRoomSeats() {
            return roomSeats;
        }

        @Override
        public String toString() {
            StringBuilder roomModelAsString = new StringBuilder("[");
            for (SeatModelPrice seatModel : this.availableSeats) {
                roomModelAsString.append(seatModel.toString()).append(", ");
            }
            roomModelAsString.append("]");
            return roomModelAsString.toString();
        }
    }
  learner_created: true
- name: src/cinema/model/exception/ExceptionHandlerController.java
  visible: true
  text: |
    package cinema.model.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    @ControllerAdvice
    public class ExceptionHandlerController {

        CustomExceptionMessage customExceptionBody;

        @ExceptionHandler(OutOfBoundsException.class)
        public ResponseEntity<CustomExceptionMessage> handleOutOfBounds(OutOfBoundsException e) {
            customExceptionBody = new CustomExceptionMessage(e.getMessage());
            return new ResponseEntity<>(customExceptionBody, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(SeatBookedException.class)
        public ResponseEntity<CustomExceptionMessage> handleSeatBooked(SeatBookedException e) {
            customExceptionBody = new CustomExceptionMessage(e.getMessage());
            return new ResponseEntity<>(customExceptionBody, HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/model/exception/TokenNotFoundException.java
  visible: true
  learner_created: true
- name: src/cinema/service/TokenService.java
  visible: true
  learner_created: true
- name: src/cinema/controller/TokenController.java
  visible: true
  learner_created: true
- name: src/cinema/model/TokenModel.java
  visible: true
  learner_created: true
- name: src/cinema/model/ReturnTokenModel.java
  visible: true
  learner_created: true
- name: src/cinema/model/TokenListModel.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Unchecked
record: -1
