type: edu
custom_name: Fight!
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return FREE;
                default:
                    return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt((row * 3 + col)));
                }
            }
        }

        FieldState get(int x, int y) {
            return field[y - 1][x - 1];
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        } else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        boolean isWinning(FieldState side) {
            if (side == FieldState.FREE) {
                return false;
            }

            if (get(1, 1) == side &&
                get(1, 2) == side &&
                get(1, 3) == side) {
                return true;
            }

            if (get(2, 1) == side &&
                get(2, 2) == side &&
                get(2, 3) == side) {
                return true;
            }

            if (get(3, 1) == side &&
                get(3, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 1) == side &&
                get(3, 1) == side) {
                return true;
            }

            if (get(1, 2) == side &&
                get(2, 2) == side &&
                get(3, 2) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 3) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 2) == side &&
                get(3, 1) == side) {
                return true;
            }

            return false;
        }

        boolean isDraw() {
            if (isWinning(FieldState.X) || isWinning(FieldState.O)) {
                return false;
            }
            for (int x = 1; x <= 3; x++) {
                for (int y = 1; y <= 3; y++) {
                    if (get(x, y) == FieldState.FREE) {
                        return false;
                    }
                }
            }
            return true;
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[]{
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                TicTacToeField ticTacToeField = new TicTacToeField(field);
                return ticTacToeField;
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

        public int getXCount() {

            return (int) Arrays.stream(field)
                .flatMap(Arrays::stream)
                .filter(field -> field != null && field.equals(FieldState.X))
                .count();
        }

        public int getOCount() {
            return (int) Arrays.stream(field)
                .flatMap(Arrays::stream)
                .filter(field -> field != null && field.equals(FieldState.O))
                .count();
        }
    }


    class Clue {
        int x, y;

        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {

        static String[] inputs = new String[]{
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {

                Random random = new Random();
                String randomInput = "";
                for (int j = 0; j < 10; j++) {
                    int randX = random.nextInt(4) + 1;
                    int randY = random.nextInt(4) + 1;
                    randomInput += randX + " " + randY + "\n";
                }

                String fullMoveInput = randomInput
                    + iterateCells(input) + iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }

                if (Math.abs(curr.getXCount() - curr.getOCount()) > 1) {
                    return CheckResult.wrong("Wrong number of X's and O's in the field!");
                }
            }

            List<String> lines = reply
                .strip()
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String lastLine = lines.get(lines.size() - 1);

            if (!(lastLine.contains("X wins")
                || lastLine.contains("O wins")
                || lastLine.contains("Draw")
            )) {
                return new CheckResult(false,
                    "Can't parse final result, " +
                        "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"O wins\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("O wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"O wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            TicTacToeField lastField = fields.get(fields.size() - 1);

            if (lastField.isWinning(FieldState.X) && !lastLine.contains("X wins")) {
                return new CheckResult(false,
                    "Your last field shows that X wins, " +
                        "and your last line should contain \"X wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.O) && !lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your last field shows that O wins, " +
                        "and your last line should contain \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isDraw() && !lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your last field shows that there is a draw, " +
                        "and your last line should contain \"Draw\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.X) ||
                lastField.isWinning(FieldState.O) ||
                lastField.isDraw()) {
                return CheckResult.correct();
            }

            return CheckResult.wrong(
                "Your last field contains unfinished game, the game should be finished!"
            );
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    import tictactoe.java.TicTacToe;

    import java.lang.reflect.Array;
    import java.util.ArrayList;
    import java.util.List;

    public class Main {

        public static void main(String[] args) {
            TicTacToe newGame = new TicTacToe();
            newGame.startTicTacToeGame();
        }
    }
    /*
    STAGE 5
    El primer jugador tiene que jugar como X y su oponente juega como O.
    En esta etapa, debe escribir un programa que:
    1. Imprime una cuadricula vacia el comienzo del juego
    2. Crea un bucle de juego donde el programa le pide al usuario que
    ingrese las coordenadas de la celda, analiza el movimiento para verificar
    que sea correcto y muestra una cuadricula con los cambios si todo esta
    bien.
    3. termina el juego cuando alguien gana o hay un empate
     */
  learner_created: true
- name: src/tictactoe/java/TicTacToe.java
  visible: true
  text: |-
    package tictactoe.java;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class TicTacToe {

        final char DASH = '-';
        final char PLEAT = '|';
        final char SPACE = ' ';
        final char SUB = '_';
        final char OU = 'O';
        final char EX = 'X';
        final int COLS = 8;
        final int ROWS = 4;
        final int TWO = 2;
        final Scanner scanner = new Scanner(System.in);
        final List<Integer> indexCol = List.of(2, 4, 6);
        final List<Integer> indexRow = List.of(1, 2, 3);

        List<List<Character>> boardList;

        public void startTicTacToeGame() {
            /*
            boardList = createBoard(getUserInput());
            printGameBoard(boardList);
            boolean validCoord = false;
            do {
                List<String> coordinates = getCoordinates();
                if (checkCoordinates(coordinates)) {
                    printGameBoard(boardList);
                    validCoord = true;
                }
            } while (!validCoord);
            */

            boolean firstPlayer = true;
            boolean endGame = false;
            boardList = createEmptyBoard();
            printGameBoard(boardList);
            do {
                List<String> coordinates = getCoordinates();
                if (checkCoordinates(coordinates)) {
                    if (checkGame(boardList, coordinates)) {

                    }
                }
            }
            /*
            START
            VAR primerJugador = true
            VAR finalJuego = false
            crearTableroVacio()
            imprimirTablero()
            DO
                solicitarCoordenadas()
                IF (verificarCoordenadas())
                    IF (!buscarJuego())
                        establecerFicha()
                        imprimirTablero()
                        VAR primerJugador = !primerJugador
                    ELSE
                        VAR finalJuego = true
            WHILE (!finalJuego)
            STOP
             */
            // System.out.println("Vertical game: " + findVerticalGame(boardList));
            // System.out.println("Horizontal game: " + findHorizontalGame(boardList));
            // System.out.println("Diagonal game: " + findDiagonalGame(boardList));
            // System.out.println("Empty space: " + findEmptySpace(boardList));
            // System.out.println("Difference: " + findDifference(boardList));

            // verifica e imprime el resultado del juego
            // checkGame(boardList);
        }

        private String getUserInput() {
            System.out.print("Enter cells: ");
            return scanner.nextLine();
        }

        private List<List<Character>> createEmptyBoard() {
            List<List<Character>> boardList = new ArrayList<>();
            for (int i = 0; i <= ROWS; i++) {
                List<Character> listRow = new ArrayList<>();
                for (int j = 0; j <= COLS; j++) {
                    if (i == 0 || i == ROWS) {
                        listRow.add(DASH);
                    } else if (j == 0 || j == COLS) {
                        listRow.add(PLEAT);
                    } else {
                        listRow.add(SPACE);
                    }
                }
                boardList.add(listRow);
            }
            return boardList;
        }

        private List<List<Character>> createBoard(String input) {
            int index = 0;
            char[] inputArray = input.toCharArray();
            List<List<Character>> boardList = new ArrayList<>();
            for (int i = 0; i <= ROWS; i++) {
                List<Character> listRow = new ArrayList<>();
                for (int j = 0; j <= COLS; j++) {
                    if (i == 0 || i == ROWS) {
                        listRow.add(DASH);
                    } else if (j == 0 || j == COLS) {
                        listRow.add(PLEAT);
                    } else if (indexCol.contains(j)) {
                        listRow.add(inputArray[index++]);
                    } else {
                        listRow.add(SPACE);
                    }
                }
                boardList.add(listRow);
            }
            return boardList;
        }

        private void checkGame(List<List<Character>> boardList, List<String> coordinates) {
            // verifica el juego vertical
            List<Character> vertical = findVerticalGame(boardList);
            // verifica el juego horizontal
            List<Character> horizontal = findHorizontalGame(boardList);
            // verifica el juego diagonal
            char diagonal = findDiagonalGame(boardList);
            // verifica un espacio vacio
            boolean empty = findEmptySpace(boardList);
            // verifica la diferencia de cantidad entre x y O
            int difference = findDifference(boardList);

            // Existe una ficha ganadora
            // Game not finished: no hay ningun juego y existen espacios vacio
            // Draw: no hay ningun juego y no existen espacios vacios
            // X wins: juego para X
            // O wins: juego para O
            // Impossible: existe juego para X y O
            // o la diferencia entre X y O es igual o mayor que 2

            // verifica que alguien gano
            boolean winner = vertical.size() == TWO || horizontal.size() == TWO || diagonal != SPACE;
            boolean twoGames = vertical.size() > TWO || horizontal.size() > TWO;
            if (winner) {
                char winnerChar = diagonal;
                if (vertical.size() == TWO) {
                    winnerChar = vertical.get(1);
                } else if (horizontal.size() == TWO) {
                    winnerChar = horizontal.get(1);
                }
                System.out.println(winnerChar + " wins");
            } else if (twoGames || difference > 1) {
                System.out.println("Impossible");
            } else {
                if (empty) {
                    System.out.println("Game not finished");
                } else {
                    System.out.println("Draw");
                }
            }
        }

        private List<String> getCoordinates() {
            System.out.print("Enter the coordinates: ");
            return List.of(scanner.nextLine().split(" "));
        }

        private boolean checkCoordinates(List<String> coordinates) {
            int numX;
            int numY;
            boolean validCoord = false;
            List<Integer> converted = convertCoordinatesToInteger(coordinates);
            if (!converted.isEmpty()) {
                numX = converted.get(0);
                numY = converted.get(1);
                if (indexRow.contains(numX) && numY >= 1 && numY <= 3) {
                    numY = indexCol.get(numY - 1);
                    if (boardList.get(numX).get(numY) == SUB) {
                        // establece la jugadd
                        setPlayInBoardList(numX, numY);
                        validCoord = true;
                    } else {
                        System.out.println("This cell is occupied! Choose another one!");
                    }
                } else {
                    System.out.println("Coordinates should be from 1 to 3!");
                }
            } else {
                System.out.println("You Should enter numbers!");
            }
            return validCoord;
        }

        private List<Integer> convertCoordinatesToInteger(List<String> coordinates) {
            List<Integer> numbers = new ArrayList<>();
            try {
                numbers.add(Integer.parseInt(coordinates.get(0)));
                numbers.add(Integer.parseInt(coordinates.get(1)));
            } catch (Exception ignored) {}
            return numbers.size() == TWO ? numbers : new ArrayList<>();
        }

        private void setPlayInBoardList(int numX, int numY) {
            for (int i = 0; i < boardList.size(); i++) {
                for (int j = 0; j < boardList.get(i).size(); j++) {
                    if (i == numX && j == numY) {
                        boardList.get(numX).set(numY, EX);
                    }
                }
            }
        }

        private void printGameBoard(List<List<Character>> boardList) {
            for (List<Character> characters : boardList) {
                for (Character character : characters) {
                    System.out.print(character);
                }
                System.out.println();
            }
        }

        private List<Character> findVerticalGame(List<List<Character>> boardList) {
            char firstChar;
            List<Character> charArray = new ArrayList<>();
            charArray.add(SPACE);
            for (int i = 0; i < 1; i++) {
                for (int j = 0; j < 3; j++) {
                    firstChar = boardList.get(indexRow.get(i)).get(indexCol.get(j));
                    if (firstChar == OU || firstChar == EX) {
                        if (firstChar == boardList.get(indexRow.get(i) + 1).get(indexCol.get(j))) {
                            if (firstChar == boardList.get(indexRow.get(i) + 2).get(indexCol.get(j))) {
                                charArray.add(firstChar);
                            }
                        }
                    }
                }
            }
            return charArray;
        }

        private List<Character> findHorizontalGame(List<List<Character>> boardList) {
            char firstChar;
            List<Character> charArray = new ArrayList<>();
            charArray.add(SPACE);
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 1; j++) {
                    firstChar = boardList.get(indexRow.get(i)).get(indexCol.get(j));
                    if (firstChar == OU || firstChar == EX) {
                        if (firstChar == boardList.get(indexRow.get(i)).get(indexCol.get(j + 1))) {
                            if (firstChar == boardList.get(indexRow.get(i)).get(indexCol.get(j + 2))) {
                                charArray.add(firstChar);
                            }
                        }
                    }
                }
            }
            return charArray;
        }

        private char findDiagonalGame(List<List<Character>> boardList) {
            char firstChar;
            for (int i = 0; i < 1; i++) {
                for (int j = 0; j < 1; j++) {
                    firstChar = boardList.get(indexRow.get(i)).get(indexCol.get(j));
                    if (firstChar == OU || firstChar == EX) {
                        if (firstChar == boardList.get(indexRow.get(i + 1)).get(indexCol.get(j + 1))) {
                            if (firstChar == boardList.get(indexRow.get(i + 2)).get(indexCol.get(j + 2))) {
                                return firstChar;
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < 1; i++) {
                for (int j = 2; j > 1; j--) {
                    firstChar = boardList.get(indexRow.get(i)).get(indexCol.get(j));
                    if (firstChar == OU || firstChar == EX) {
                        if (firstChar == boardList.get(indexRow.get(i + 1)).get(indexCol.get(j - 1))) {
                            if (firstChar == boardList.get(indexRow.get(i + 2)).get(indexCol.get(j - 2))) {
                                return firstChar;
                            }
                        }
                    }
                }
            }

            return SPACE;
        }

        private boolean findEmptySpace(List<List<Character>> boardList) {
            for (List<Character> characters : boardList) {
                for (Character character : characters) {
                    if (character == SUB) {
                        return true;
                    }
                }
            }
            return false;
        }

        private int findDifference(List<List<Character>> boardList) {
            int exes = 0;
            int ous = 0;
            for (List<Character> characters : boardList) {
                for (Character character : characters) {
                    if (character == EX) {
                        exes++;
                    } else if (character == OU) {
                        ous++;
                    }
                }
            }
            return Math.abs(exes - ous);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5401#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 18 Jun 2022 20:38:28 UTC
record: -1
